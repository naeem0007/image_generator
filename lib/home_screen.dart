import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:image_generator/api_services.dart';
import 'package:image_generator/arts_screen.dart';
import 'package:image_generator/colors.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  var sizes = ["Small", "Medium", "Large"];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  var textController = TextEditingController();
  String image = "";
  var isLoaded = false;
  var loader = false;

  ScreenshotController screenshotController = ScreenshotController();

  downloadImg() async {
    var result = await Permission.storage.request();
    if (result.isGranted) {
      const foldername = "AI Image";
      final filename = "${DateTime.now().millisecondsSinceEpoch}.png";

      final path = Directory("storage/emulated/0/$foldername");
      if (await path.exists()) {
        await screenshotController.captureAndSave(path.path,
            delay: const Duration(milliseconds: 100),
            fileName: filename,
            pixelRatio: 1.0);
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("Downloaded to ${path.path}")));
      } else {
        await path.create();
        await screenshotController.captureAndSave(path.path,
            delay: const Duration(milliseconds: 100),
            fileName: filename,
            pixelRatio: 1.0);
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("Downloaded to ${path.path}")));
      }
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text("Permission Denied!")));
    }
  }

  shareImage() async {
    await screenshotController
        .capture(
      delay: const Duration(milliseconds: 100),
      pixelRatio: 1.0,
    )
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        const filename = "share.png";
        final imgPath = await File("$directory/$filename").create();
        await imgPath.writeAsBytes(img);

        Share.shareFiles([imgPath.path], text: "Generated By AI--NaeemDevs");
      } else {
        print("Failed to take Screenshot");
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
          actions: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(
                  Icons.art_track_rounded,
                  size: 34,
                ),
                onPressed: () {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => const ArtScreen()));
                },
              ),
            ),
          ],
          centerTitle: true,
          title: const Text(
            "AI Image Generator",
            style: TextStyle(fontFamily: poppinsBold, color: whitecolor),
          )),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Expanded(
                child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        height: 44,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                        ),
                        decoration: BoxDecoration(
                            color: whitecolor,
                            borderRadius: BorderRadius.circular(12)),
                        child: TextFormField(
                          controller: textController,
                          decoration: const InputDecoration(
                              hintText: "eg: A Monkey on the Moon",
                              border: InputBorder.none),
                        ),
                      ),
                    ),
                    const SizedBox(
                      width: 12,
                    ),
                    Container(
                      height: 44,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8, vertical: 2),
                      decoration: BoxDecoration(
                          color: whitecolor,
                          borderRadius: BorderRadius.circular(12)),
                      child: DropdownButtonHideUnderline(
                          child: DropdownButton(
                              icon: const Icon(
                                Icons.expand_more_rounded,
                                color: btnColor,
                              ),
                              value: dropValue,
                              hint: const Text("Select Size"),
                              items: List.generate(
                                  sizes.length,
                                  (index) => DropdownMenuItem(
                                        value: values[index],
                                        child: Text(sizes[index]),
                                      )),
                              onChanged: (value) {
                                setState(() {
                                  dropValue = value.toString();
                                });
                              })),
                    )
                  ],
                ),
                SizedBox(
                    height: 44,
                    width: 300,
                    child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                            backgroundColor: btnColor,
                            shape: const StadiumBorder()),
                        onPressed: () async {
                          if (textController.text.isNotEmpty &&
                              dropValue!.isNotEmpty) {
                            setState(() {
                              isLoaded = false;
                            });
                            image = await Api.generateImage(
                                textController.text, dropValue!);
                            setState(() {
                              isLoaded = true;
                            });
                          } else {
                            ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content: Text(
                                        "Please Enter Anything and Select Size")));
                          }
                        },
                        child: const Text("Generate")))
              ],
            )),
            Expanded(
                flex: 4,
                child: isLoaded
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                              clipBehavior: Clip.antiAlias,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Screenshot(
                                controller: screenshotController,
                                child: Image.network(
                                  image,
                                  fit: BoxFit.contain,
                                ),
                              )),
                          const SizedBox(
                            height: 12,
                          ),
                          Row(
                            children: [
                              Expanded(
                                  child: ElevatedButton.icon(
                                      icon: const Icon(Icons.download),
                                      style: ElevatedButton.styleFrom(
                                          backgroundColor: btnColor),
                                      onPressed: () {
                                        downloadImg();
                                      },
                                      label: const Text("Download"))),
                              const SizedBox(
                                width: 12,
                              ),
                              Expanded(
                                  child: ElevatedButton.icon(
                                      icon: const Icon(Icons.share),
                                      style: ElevatedButton.styleFrom(
                                          backgroundColor: btnColor),
                                      onPressed: () async {
                                        shareImage();
                                        ScaffoldMessenger.of(context)
                                            .showSnackBar(const SnackBar(
                                                content: Text("Image Shared")));
                                      },
                                      label: const Text("Share"))),
                            ],
                          )
                        ],
                      )
                    : Container(
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(12),
                            color: whitecolor),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Image.asset("assets/Fancy pants.gif"),
                            const SizedBox(
                              height: 12,
                            ),
                            const Text(
                              "Waiting for Images to Generate",
                              style: TextStyle(fontSize: 16),
                            )
                          ],
                        ),
                      )),
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: Text(
                "Developed By Naeem",
                style: TextStyle(color: whitecolor),
              ),
            )
          ],
        ),
      ),
    );
  }
}
